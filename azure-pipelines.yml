trigger:
  branches:
    include:
      - main
      - development
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  name: 'Default'
  vmImage: 'ubuntu-latest'

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g pnpm
        pnpm install
      displayName: 'Install Dependencies'

    - script: |
        pnpm lint
      displayName: 'Run Linting'
      continueOnError: true

    - script: |
        pnpm test:ci
      displayName: 'Run Tests'
      continueOnError: true
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit.xml'
        mergeTestResults: true
        testRunTitle: 'Unit Tests'
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      continueOnError: true

    - script: |
        pnpm build
      displayName: 'Build Application'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '.next'
        ArtifactName: 'next-build'
        publishLocation: 'Container'
      displayName: 'Publish Next.js Build'

- stage: Package_Development
  displayName: 'Package for Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isDev, true))
  jobs:
  - job: Package
    displayName: 'Create Deployment Package'
    steps:
    - download: current
      artifact: 'next-build'
      displayName: 'Download Build Artifacts'
    
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        cp -r $(Pipeline.Workspace)/next-build/* $(Build.ArtifactStagingDirectory)/deploy/
        cp package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp pnpm-lock.yaml $(Build.ArtifactStagingDirectory)/deploy/
        echo "Starting command: pnpm start" > $(Build.ArtifactStagingDirectory)/deploy/start.sh
        chmod +x $(Build.ArtifactStagingDirectory)/deploy/start.sh
      displayName: 'Prepare Deployment Package'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy'
        ArtifactName: 'development-deployment'
        publishLocation: 'Container'
      displayName: 'Publish Deployment Package'
    
    - script: |
        echo "##vso[task.complete result=Succeeded;]Development deployment package ready for manual deployment."
      displayName: 'Deployment Ready'

- stage: Package_Production
  displayName: 'Package for Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
  - job: Package
    displayName: 'Create Production Package'
    steps:
    - download: current
      artifact: 'next-build'
      displayName: 'Download Build Artifacts'

    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy
        cp -r $(Pipeline.Workspace)/next-build/* $(Build.ArtifactStagingDirectory)/deploy/
        cp package.json $(Build.ArtifactStagingDirectory)/deploy/
        cp pnpm-lock.yaml $(Build.ArtifactStagingDirectory)/deploy/
        echo "Starting command: NODE_ENV=production pnpm start" > $(Build.ArtifactStagingDirectory)/deploy/start.sh
        chmod +x $(Build.ArtifactStagingDirectory)/deploy/start.sh
      displayName: 'Prepare Production Package'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/deploy'
        ArtifactName: 'production-deployment'
        publishLocation: 'Container'
      displayName: 'Publish Production Package'
    
    - script: |
        echo "##vso[task.complete result=Succeeded;]Production deployment package ready for manual deployment."
      displayName: 'Deployment Ready' 